name: Release
on:
  pull_request:
    types: [closed]
    branches:
      - release

  # Configurations around VitePress deployment is from the following official guide:
  # https://vitepress.dev/guide/deploy#github-pages

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    name: Build VitePress
    # 'merged == true' to prevent from being triggered when PR is closed
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Not needed if lastUpdated is not enabled
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: npm ci
      - name: Build with VitePress
        run: npm run docs:build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/.vitepress/dist

  deploy:
    name: Deploy to GitHub Pages
    if: github.event.pull_request.merged == true
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-release-note:
    name: Publish release note
    if: github.event.pull_request.merged == true
    needs: deploy
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Generate CalVer version
        id: calver
        uses: actions/github-script@v6
        with:
          script: |
            const now = new Date();
            const year = now.getFullYear().toString();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate();
            const week = Math.floor((day - 1) / 7) + 1;

            let version = `${year}.${month}.week${week}`;
            console.log(`Version set to ${version}`);

            const { owner, repo } = context.repo;

            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 50,
            });

            const tagLine = releases.data.find(release => release.tag_name.includes(version));
            const count = tagLine ? Number(tagLine.tag_name.split('release')[1]) + 1 : 1;

            version = `${version}.release${count}`;
            const releaseNoteName = `${year}-${month} Week ${week}（Release No.${count}）`;
            console.log(`Final Version set to ${version}`);
            console.log(`Release Note Name set to ${releaseNoteName}`);

            core.setOutput('version', version);
            core.setOutput('release_note_name', releaseNoteName);
      - uses: release-drafter/release-drafter@v5
        with:
          config-name: ./release-drafter-config.yml
          tag: ${{ steps.calver.outputs.version }}
          name: ${{ steps.calver.outputs.release_note_name }}
          version: ${{ steps.calver.outputs.version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
